** General App Idea**

1 -     Create a form, 'New Book' button, and an empty card.
2 -     Only the button should be visible at first.
3 -     After button click, bring forward the form on a card.
4 -     The form details are put to a new empty card. New card has a spot on page.
5 -     The process should be repeatable, with new cards being added to the page.
6 -     Each card can be edited.
7 -     The reading status can be toggled.
8 -     The book (card) can be removed.
9 -     A tab at the bottom of the screen shows the collected stats of the books.

-- Pseudocode for Step 3 --

1 -     Create button that brings existing form to the front of screen.
2 -     Should be centre screen with background blurred and locked.
3 -     Submitting the form should store the information in the array.

-- Pseudocode for Step 4 --

1 -     Submit button should create a div with card class.
2 -     Card should slot in horizontally.
3 -     Cards contents should be what was just submitted on the form.
4 -     Or should be added to array and function loops through array to add new item.

-- Pseudocode for Step 6 --

1 -     Create a function that can edit an object in set.
2 -     Edit button brings up the form again.
3 -     Form inputs should be current card data.
4 -     New form inputs should edit current card on screen and in array.
5 -     Set old data to new data using the function.
6 -     Set item should be the same with updated details.
***************************
Refactor for classes

### 1. **Organize Your Code Structure**

- **Group Related Functions**: Start by grouping functions that deal with similar tasks. For example, functions related to book management (like adding, updating, and removing books) can be in one section, while UI-related functions (like rendering forms and displaying books) can be in another.

### 2. **Create a Library Class**

- **Encapsulate Library Logic**: Consider creating a `Library` class that will manage the collection of books. This class can handle adding and removing books, updating their state, and maintaining the library's state.

### 3. **Utilize Methods within Classes**

- **Refactor Functions as Methods**: Move functions that operate on books or the library into methods of the `Library` class. For example, `addBookToLibrary`, `removeBook`, and `updateBookDisplay` can become methods of the `Library` class.

### 4. **Define Book Functionality**

- **Enhance the Book Class**: If you haven't already, define methods within the `Book` class that allow for behaviors related to a book, like toggling the read status.

### 5. **Use Event Handlers Effectively**

- **Bind Methods to Event Handlers**: Instead of defining event handlers inline, consider creating methods within your classes that handle these events. This can help keep the code organized and maintainable.

### 6. **Implement Utility Functions**

- **Create Helper Functions**: If you have repetitive tasks (like generating a unique ID), you can create utility functions or static methods in the `Library` class.

### 7. **Refactor for Clarity and Readability**

- **Use Descriptive Naming**: Ensure that function and variable names clearly indicate their purpose. This helps anyone reading the code (including yourself) to understand its flow better.

### 8. **Test After Each Change**

- **Incremental Refactoring**: As you refactor, test your code frequently to ensure that you havenâ€™t introduced any bugs. This can help you isolate issues and understand the impact of each change.

### Example Steps

1. **Create a Library Class**:
   - Define a `Library` class that maintains `myLibrary` and has methods for adding/removing books.

2. **Move Related Functions**:
   - Move `addBookToLibrary`, `removeBook`, and `updateBookDisplay` into the `Library` class.

3. **Adjust Event Handlers**:
   - Change your event listeners to call methods on the `Library` instance instead of standalone functions.

4. **Refactor UI Functions**:
   - Consider creating a `UI` class that handles rendering books and forms. Methods like `renderForm` and `displayBook` can go there.

5. **Update Your Code Base**:
   - After creating classes, update all parts of your code that reference the old function structure to use the new class methods.